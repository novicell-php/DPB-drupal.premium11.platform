name: Handle Platform Updates

on:
  repository_dispatch:
    types: [platform-update]

jobs:
  handle-platform-update:
    runs-on: ubuntu-latest
    environment: ${{ github.event.client_payload.environment }}
    steps:
      - name: Log Payload
        run: |
          echo "Received Platform Update Payload:"
          echo "================================="
          echo "Environment: ${{ github.event.client_payload.environment }}"
          echo "Commit: ${{ github.event.client_payload.commit }}"

      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine target branch
        id: branch
        run: |
          if [[ "${{ github.event.client_payload.environment }}" == "production" ]]; then
            echo "TARGET_BRANCH=main" >> $GITHUB_ENV
          else
            echo "TARGET_BRANCH=staging" >> $GITHUB_ENV
          fi
          echo "Target branch: ${{ env.TARGET_BRANCH }}"

      - name: Update branch if needed
        run: |
          # Checkout the target branch
          git fetch origin
          git checkout ${TARGET_BRANCH} || git checkout -b ${TARGET_BRANCH} origin/${TARGET_BRANCH}
          git pull origin ${TARGET_BRANCH}
          
          # Setup the configuration for the git user
          git config --global user.name "GitHub Actions"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          # Check if we need to update to the specified commit
          CURRENT_COMMIT=$(git rev-parse HEAD)
          TARGET_COMMIT="${{ github.event.client_payload.commit }}"
          
          if [ "$CURRENT_COMMIT" != "$TARGET_COMMIT" ]; then
            echo "Current commit ($CURRENT_COMMIT) differs from target commit ($TARGET_COMMIT)"
            
            # Check if the target commit exists in this repository
            if git cat-file -e $TARGET_COMMIT 2>/dev/null; then
              echo "Target commit exists, checking it out"
              git checkout $TARGET_COMMIT
              git checkout -b temp-branch
              git branch -f ${TARGET_BRANCH} temp-branch
              git checkout ${TARGET_BRANCH}
              git push origin ${TARGET_BRANCH} --force
            else
              echo "Target commit does not exist in this repository"
              # Here you could implement additional logic to handle this case
              # For example, you might want to create a PR or notify someone
            fi
          else
            echo "Current commit matches target commit, no update needed"
          fi